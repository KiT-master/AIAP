<style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }

        h1 {
            color: #333;
        }

        #container {
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        #container > * {
            width: 530px;
            height: 400px;
            border: 2px solid #333;
        }

        #canvas {
            display: none;
        }

        #fallDetectionResult {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
            height: auto;
            display: block;
        }
    </style>
<body>
    <h1>Fall Detection Demo</h1>
    <div id="container">
        <video id="webcam" autoplay></video>
        <img src="/get" id="output" alt="Output Image"/>
        <canvas id="canvas"></canvas>
    </div>
    <br/>
    <span id="fallDetectionResult"></span>
    <audio id="alarmSound" src="\static\mixkit-classic-alarm-995.mp3" preload="auto"></audio>
    <script>
        const webcam = document.getElementById('webcam');
        const output = document.getElementById('output');
        const fallDetectionResult = document.getElementById('fallDetectionResult');
        const alarmSound = document.getElementById('alarmSound');

        if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    webcam.srcObject = stream;

                    const canvas = document.querySelector('canvas');

                    function captureAndSend() {
                        return new Promise((resolve) => {
                            canvas.getContext('2d').drawImage(webcam, 0, 0, canvas.width, canvas.height);
                            canvas.toBlob((blob) => {
                                let formData = new FormData();
                                formData.append("content", blob);
                                fetch("/upload", { method: 'POST', body: formData })
                                    .then(() => {
                                        output.src = "/get?t=" + Math.random();
                                        resolve();
                                    })
                                    .catch((e) => {
                                        console.error(e);
                                        resolve();
                                    });
                            });
                        });
                    }

                    async function captureLoop() {


                        await captureAndSend();   

                        fetch("/get_fall_detection_result")
                        .then((r) => r.text())
                        .then((result) => {
                            if(result.toLowerCase() === "true") {
                                fallDetectionResult.textContent = "Fall detected";   
                        
                                console.log("Alarm will be played")
                                playAlarm();
                                alert("Fall detected! Please check on the person.");
                                stopAlarm();
                            }
                        }).catch((e) => {
                            console.log(`error supressed ${e.toString()}`);
                        });


                        requestAnimationFrame(captureLoop);
                    }

                    function playAlarm() {
                        alarmSound.play();
                    }

                    function stopAlarm() {
                        alarmSound.pause();
                        alarmSound.currentTime = 0;
                    }

                    captureLoop();
                })
                .catch((error) => {
                    console.error('Error accessing webcam:', error);
                });
        } else {
            console.error('getUserMedia not supported in this browser.');
        }
    </script>
</body>